#TODO: main
snippet main
	main
snippet pkg
	package {
		import ${1:flash.};
		${2}
	}
snippet fun
	${4:public} function ${1:method}(${2:name:String}):${3:void} {
		${5}
	}
snippet proto
	${4:public} function ${1:method}(${2:name:String}):${3:void} {
		${5}
	}
snippet cls
	class ${1:`Filename("", "untitled")`} ${2:extends Parent} {

		public function $1(${3:name:String}){
			${4}
		}

		${5}
	}
snippet in
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent} {
		${3}
	}
snippet on
	addEventListener(${1:MouseEvent}.${2:CLICK}, ${3:`$2`Handler});
	function $3(event:$1):void
	{
		${4:/* code here */}
	}
snippet var
	var ${1:name}:${2:String} = ${3:null};${4}
snippet try
	try {
		${3}
	} catch(${1:Exception} ${2:e}) {
	}
snippet tryf
	try {
		${3}
	} catch(${1:Exception} ${2:e}) {
	} finally {
	}


# Anonymous Function
snippet f
	function(${1}):${2:void} {${3}};
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i}:Number = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i}:Number = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
