#!/usr/bin/env ruby
# encoding: utf-8

require 'rexml/document'
require 'optparse'
require 'open-uri'

class YoudaoDict

  def initialize(options = {})
    @options = options
    @word    = options[:word]
  end

  def translate
    if @word && !@word.empty?
      open("https://dict.youdao.com/fsearch?q=#{URI.escape @word}") do |src|
        parse src
      end

      play_voice if @options[:voice]
    end
  end

  def parse(src)
    xml = REXML::Document.new(src)
    parse_phonetic_symbol xml

    __ "辞典翻译: #{@word}", "="
    parse_dict_trans      xml

    __ "网络释义", "="
    parse_web_trans       xml
  end


  protected
    # 音标
    def parse_phonetic_symbol( xml )
      xml.each_node('//phonetic-symbol') do |node|
        if node.text
          indent
          print @word
          puts " [#{node.text}]".cyan
        end
      end
    end

    # 辞典
    def parse_dict_trans( xml )
      xml.each_node('//translation/content') do |node|
        indent
        puts node.text.green
      end
    end

    # 网络释义
    def parse_web_trans( xml )
      xml.each_node('//yodao-web-dict/web-translation') do |node|
        __ node.first_node('key/').text
        node.each_node('trans/value/') do |val|
          indent
          puts val.text
        end
      end
    end

  private
    def __(t, pad='-', len=30 )
      puts " #{t} ".center(len, pad)
    end

    def indent(idt=2)
      print " " * idt
    end


  def play_voice
    url = "http://dict.youdao.com/dictvoice?audio=#{URI.escape @word}&type=#{@options[:accent]}"
    system "mpg123", "-q", "--", url
  end
  
  public :play_voice

end

##################################
######## Helper classes ##########
##################################

module REXML
  # REXML::Element patch
  # for better readablitiy
  class Element
    def each_node(path, &block); XPath.each(self, path, &block); end
    def first_node(path); XPath.first(self, path); end
  end
end

class String
  COLORS = %w(black red green yellow blue magenta cyan white)
  COLORS.each_with_index do |color, idx|
    define_method color do
      "\e[3#{idx}m" << self.to_s << "\e[0m"
    end

    define_method "#{color}_bg" do
      "\e[4#{idx}m" << self.to_s << "\e[0m"
    end
  end
end


class YoudaoDict::CLI

  def initialize

    options = {accent: 1}

    parser = OptionParser.new do |o|
      o.banner = "Usage: dict <word> [options]"

      o.on("-v", "--voice", "play voice") do
        options[:voice] = true
      end

      o.on("-a", "--accent=acent", "accent of voice, can either be `1` (UK) or `2` (US)") do |a|
        options[:accent] = a
      end
    end

    options[:word] = parser.parse(ARGV).join(' ')

    YoudaoDict.new(options).translate
  end
end

## script entrace
YoudaoDict::CLI.new if __FILE__ == $0
